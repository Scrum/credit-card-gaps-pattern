var creditCardGapsPattern=function(){"use strict";function r(r){return function(r){if(Array.isArray(r)){for(var t=0,e=new Array(r.length);t<r.length;t++)e[t]=r[t];return e}}(r)||function(r){if(Symbol.iterator in Object(r)||"[object Arguments]"===Object.prototype.toString.call(r))return Array.from(r)}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var t={type:{DIGIT:9},errors:{GAPS_MISSING:"A gaps option must be provided",GAPS_NOT_ARRAY:"A gaps option must be Array",GAPS_NOT_EMPTY:"A gaps option must not be empty",LENGTHS_MISSING:"A lengths option must be provided",LENGTHS_NOT_ARRAY:"A lengths option must be Array",LENGTHS_NOT_EMPTY:"A lengths option must not be empty"}};return function(e,o){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"DIGIT";if(void 0===e)throw new Error(t.errors.GAPS_MISSING);if(!1===Array.isArray(e))throw new TypeError(t.errors.GAPS_NOT_ARRAY);if(0===e.length)throw new TypeError(t.errors.GAPS_NOT_EMPTY);if(void 0===o)throw new Error(t.errors.LENGTHS_MISSING);if(!1===Array.isArray(o))throw new TypeError(t.errors.LENGTHS_NOT_ARRAY);if(0===o.length)throw new TypeError(t.errors.LENGTHS_NOT_EMPTY);return[].concat(r(e),[Math.max.apply(Math,r(o))]).map(function(r,e,o){var i=e?r-o[e-1]:r;return"{{".concat(t.type[n].toString().repeat(i),"}}")}).join(" ")}}();
